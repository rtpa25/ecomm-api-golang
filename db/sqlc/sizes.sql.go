// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: sizes.sql

package db

import (
	"context"
)

const addSize = `-- name: AddSize :one
INSERT INTO
  sizes (name)
VALUES
  ($1) RETURNING id, name
`

func (q *Queries) AddSize(ctx context.Context, name string) (Size, error) {
	row := q.db.QueryRowContext(ctx, addSize, name)
	var i Size
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteSize = `-- name: DeleteSize :exec
DELETE FROM
  sizes
WHERE
  id = $1
`

func (q *Queries) DeleteSize(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSize, id)
	return err
}

const listAllSizes = `-- name: ListAllSizes :many
SELECT
  id, name
FROM
  sizes
`

func (q *Queries) ListAllSizes(ctx context.Context) ([]Size, error) {
	rows, err := q.db.QueryContext(ctx, listAllSizes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Size{}
	for rows.Next() {
		var i Size
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
