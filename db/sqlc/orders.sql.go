// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: orders.sql

package db

import (
	"context"
)

const addOrder = `-- name: AddOrder :one
INSERT INTO
  orders (
    quantity,
    user_id,
    address,
    prodcut_id,
    selected_size
  )
VALUES
  ($1, $2, $3, $4, $5) RETURNING id, quantity, user_id, status, created_at, updated_at, address, prodcut_id, selected_size
`

type AddOrderParams struct {
	Quantity     int32  `json:"quantity"`
	UserID       int32  `json:"user_id"`
	Address      string `json:"address"`
	ProdcutID    int32  `json:"prodcut_id"`
	SelectedSize string `json:"selected_size"`
}

func (q *Queries) AddOrder(ctx context.Context, arg AddOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, addOrder,
		arg.Quantity,
		arg.UserID,
		arg.Address,
		arg.ProdcutID,
		arg.SelectedSize,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Address,
		&i.ProdcutID,
		&i.SelectedSize,
	)
	return i, err
}

const deleteOrderById = `-- name: DeleteOrderById :exec
DELETE FROM
  orders
WHERE
  id = $1
`

func (q *Queries) DeleteOrderById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrderById, id)
	return err
}

const getOrderById = `-- name: GetOrderById :one
SELECT id, quantity, user_id, status, created_at, updated_at, address, prodcut_id, selected_size FROM orders
WHERE id=$1
`

func (q *Queries) GetOrderById(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderById, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Address,
		&i.ProdcutID,
		&i.SelectedSize,
	)
	return i, err
}

const getOrdersForUser = `-- name: GetOrdersForUser :many
SELECT
  id, quantity, user_id, status, created_at, updated_at, address, prodcut_id, selected_size
FROM
  orders
WHERE
  user_id = $1
ORDER BY
  id
`

func (q *Queries) GetOrdersForUser(ctx context.Context, userID int32) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Quantity,
			&i.UserID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Address,
			&i.ProdcutID,
			&i.SelectedSize,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderForUser = `-- name: UpdateOrderForUser :one
UPDATE
  orders
SET
  quantity = $2,
  selected_size = $3,
  address = $4
WHERE
  id = $1 RETURNING id, quantity, user_id, status, created_at, updated_at, address, prodcut_id, selected_size
`

type UpdateOrderForUserParams struct {
	ID           int32  `json:"id"`
	Quantity     int32  `json:"quantity"`
	SelectedSize string `json:"selected_size"`
	Address      string `json:"address"`
}

func (q *Queries) UpdateOrderForUser(ctx context.Context, arg UpdateOrderForUserParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrderForUser,
		arg.ID,
		arg.Quantity,
		arg.SelectedSize,
		arg.Address,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Address,
		&i.ProdcutID,
		&i.SelectedSize,
	)
	return i, err
}
