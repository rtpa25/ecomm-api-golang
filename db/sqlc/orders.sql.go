// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: orders.sql

package db

import (
	"context"
)

const addOrder = `-- name: AddOrder :one
INSERT INTO orders (
  amount,
  user_id,
  status,
  address,
  prodcut_id
) VALUES (
  $1, $2, $3, $4,$5
) RETURNING id, amount, user_id, status, created_at, updated_at, address, prodcut_id
`

type AddOrderParams struct {
	Amount    int32  `json:"amount"`
	UserID    int32  `json:"user_id"`
	Status    string `json:"status"`
	Address   string `json:"address"`
	ProdcutID int32  `json:"prodcut_id"`
}

func (q *Queries) AddOrder(ctx context.Context, arg AddOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, addOrder,
		arg.Amount,
		arg.UserID,
		arg.Status,
		arg.Address,
		arg.ProdcutID,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Address,
		&i.ProdcutID,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getACertainOrder = `-- name: GetACertainOrder :one
SELECT id, amount, user_id, status, created_at, updated_at, address, prodcut_id FROM orders
WHERE id = $1
`

func (q *Queries) GetACertainOrder(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, getACertainOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Address,
		&i.ProdcutID,
	)
	return i, err
}

const getOrderForCertainUser = `-- name: GetOrderForCertainUser :one
SELECT id, amount, user_id, status, created_at, updated_at, address, prodcut_id FROM orders
WHERE user_id = $1
ORDER BY id
`

func (q *Queries) GetOrderForCertainUser(ctx context.Context, userID int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderForCertainUser, userID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Address,
		&i.ProdcutID,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, amount, user_id, status, created_at, updated_at, address, prodcut_id FROM orders
ORDER BY id 
LIMIT $1
OFFSET $2
`

type ListOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.UserID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Address,
			&i.ProdcutID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET amount = $2, status = $3, address = $4
WHERE id = $1
RETURNING id, amount, user_id, status, created_at, updated_at, address, prodcut_id
`

type UpdateOrderParams struct {
	ID      int32  `json:"id"`
	Amount  int32  `json:"amount"`
	Status  string `json:"status"`
	Address string `json:"address"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrder,
		arg.ID,
		arg.Amount,
		arg.Status,
		arg.Address,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Address,
		&i.ProdcutID,
	)
	return i, err
}
