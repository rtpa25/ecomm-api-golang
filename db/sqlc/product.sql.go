// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: product.sql

package db

import (
	"context"
)

const addProduct = `-- name: AddProduct :one
INSERT INTO
  products (
    name,
    description,
    image_url,
    image_id,
    price
  )
VALUES
  ($1, $2, $3, $4, $5) RETURNING id, name, description, created_at, updated_at, image_url, image_id, price
`

type AddProductParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	ImageUrl    string `json:"image_url"`
	ImageID     string `json:"image_id"`
	Price       string `json:"price"`
}

func (q *Queries) AddProduct(ctx context.Context, arg AddProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, addProduct,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.ImageID,
		arg.Price,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImageUrl,
		&i.ImageID,
		&i.Price,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM
  products
WHERE
  id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT
  id, name, description, created_at, updated_at, image_url, image_id, price
FROM
  products
WHERE
  id = $1
LIMIT
  1
`

func (q *Queries) GetProduct(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImageUrl,
		&i.ImageID,
		&i.Price,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT
  id, name, description, created_at, updated_at, image_url, image_id, price
FROM
  products
ORDER BY
  id
LIMIT
  $1 OFFSET $2
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ImageUrl,
			&i.ImageID,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE
  products
SET
  name = $2,
  description = $3,
  price = $4,
  image_url = $5,
  image_id = $6
WHERE
  id = $1 RETURNING id, name, description, created_at, updated_at, image_url, image_id, price
`

type UpdateProductParams struct {
	ID          int32  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Price       string `json:"price"`
	ImageUrl    string `json:"image_url"`
	ImageID     string `json:"image_id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.ImageUrl,
		arg.ImageID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImageUrl,
		&i.ImageID,
		&i.Price,
	)
	return i, err
}
