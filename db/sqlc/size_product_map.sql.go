// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: size_product_map.sql

package db

import (
	"context"
)

const addSizeToProduct = `-- name: AddSizeToProduct :one
INSERT INTO size_product_map (
  product_id,
  size_id
) VALUES (
  $1, $2
) RETURNING id, product_id, size_id
`

type AddSizeToProductParams struct {
	ProductID int32 `json:"product_id"`
	SizeID    int32 `json:"size_id"`
}

func (q *Queries) AddSizeToProduct(ctx context.Context, arg AddSizeToProductParams) (SizeProductMap, error) {
	row := q.db.QueryRowContext(ctx, addSizeToProduct, arg.ProductID, arg.SizeID)
	var i SizeProductMap
	err := row.Scan(&i.ID, &i.ProductID, &i.SizeID)
	return i, err
}

const listProductsOfSize = `-- name: ListProductsOfSize :many
SELECT id, product_id, size_id FROM size_product_map 
WHERE size_id = $1
ORDER BY id 
LIMIT $2
OFFSET $3
`

type ListProductsOfSizeParams struct {
	SizeID int32 `json:"size_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProductsOfSize(ctx context.Context, arg ListProductsOfSizeParams) ([]SizeProductMap, error) {
	rows, err := q.db.QueryContext(ctx, listProductsOfSize, arg.SizeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SizeProductMap{}
	for rows.Next() {
		var i SizeProductMap
		if err := rows.Scan(&i.ID, &i.ProductID, &i.SizeID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
